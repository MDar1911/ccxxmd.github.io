[{"title":"PHP简要回顾(上)","date":"2017-04-17T11:41:25.000Z","path":"2017/04/17/PHP_re1/","text":"复习一下PHP吧。PP虾，我们走！ 流程控制if..else 循环只有用到 if 条件只用到 if 条件，当作单纯的判断。解释成 “若发生了某事则怎样处理”。语法如下： if (expr) { statement } 其中的 expr 为判断的条件，通常都是用逻辑运算符号当判断的条件。而 statement 为符合条件的执行部分程序，若程序只有一行，可以省略大括号 {}。 范例：本例省略大括号。12345&lt;?php if ($state==1) echo &quot;哈哈&quot; ; ?&gt; 这里特别注意的是，判断是否相等是==而不是=，= 是赋值。 范例：本例的执行部分有三行，不可省略大括号。1234567891011&lt;?php if ($state==1) &#123; echo &quot;哈哈 ; echo &quot;&lt;br&gt;&quot; ; &#125; ?&gt; 除了 if 之外，加上了 else 的条件。除了 if 之外，加上了 else 的条件，可解释成“若发生了某事则怎样处理，否则改如何处理”。语法如下 if (expr) { statement1 } else { statement2 } 范例：上面的例子来修改成更完整的处理。其中的 else 由于只有一行执行的指令，因此不用加上大括号。 123456789101112131415161718if ($state==1) &#123; echo &quot;哈哈&quot; ; echo &quot;&lt;br&gt;&quot;;&#125; else&#123;echo &quot;呵呵&quot;;echo &quot;&lt;br&gt;&quot;; &#125; ?&gt; 递归的 if..else 循环递归的 if..else 循环，通常用在多种决策判断时。它将数个 if..else 拿来合并运用处理。 直接看下面的例子1234567891011121314151617&lt;?php if ( $a &gt; $b ) &#123; echo &quot;a 比 b 大&quot; ; &#125; elseif ( $a == $b ) &#123; echo &quot;a 等于 b&quot; ; &#125; else &#123; echo &quot;a 比 b 小&quot; ; &#125; ?&gt; 上例只用二层的 if..else 循环，用来比较 a 和 b 两个变量。实际要使用这种递归 if..else 循环时，要小心使用，因为太多层的循环容易使设计的逻辑出问题，或者少打了大括号等，都会造成程序出现莫名其妙的问题。 for 循环for 循环就单纯只有一种，没有变化，它的语法如下 for (expr1; expr2; expr3) { statement } 其中的 expr1 为条件的初始值。expr2 为判断的条件，通常都是用逻辑运算符号 (logical operators) 当判断的条件。expr3 为执行 statement 后要执行的部份， 用来改变条件，供下次的循环判断，如加一..等等。而 statement 为符合条件的执行部分程序，若程序只有一行，可以省略大括号 {}。 下例是用 for 循环写的的例子。123456789&lt;?php for ( $i = 1 ; $i &lt;= 10 ; $i ++) &#123; echo &quot;这是第&quot;.$i.&quot;次循环&lt;br&gt;&quot; ; &#125; ?&gt; switch 循环switch 循环，通常处理复合式的条件判断，每个子条件，都是 case 指令部分。在实作上若使用许多类似的 if 指令，可以将它综合成 switch 循环。 语法如下 switch (expr) { case expr1: statement1; break; case expr2: statement2; break; default: statementN; break; } 其中的 expr 条件，通常为变量名称。而 case 后的 exprN，通常表示变量值。冒号后则为符合该条件要执行的部分。注意要用 break 跳离循环。12345678910111213141516171819202122232425262728293031&lt;?php switch ( date ( &quot;D&quot; )) &#123; case &quot;Mon&quot; : echo &quot;今天星期一&quot; ; break; case &quot;Tue&quot; : echo &quot;今天星期二&quot; ; break; case &quot;Wed&quot; : echo &quot;今天星期三&quot; ; break; case &quot;Thu&quot; : echo &quot;今天星期四&quot; ; break; case &quot;Fri&quot; : echo &quot;今天星期五&quot; ; break; default: echo &quot;今天放假&quot; ; break; &#125; ?&gt; 这里需要注意的是break;别遗漏了，default，省略是可以的。 很明显的，上述的例子用 if 循环就很麻烦了。在设计时，要将出现机率最大的条件放在最前面，最少出现的条件放在最后面，可以增加程序的执行效率。 上例由于每天出现的机率相同，所以不用注意条件的顺序。","tags":[{"name":"PHP","slug":"PHP","permalink":"http://ccxxmd.github.io/tags/PHP/"}]},{"title":"Hexo-GitHub Page博客绑定域名","date":"2017-03-04T05:14:34.000Z","path":"2017/03/04/Blog_domainname/","text":"这是我的的第一个技(shui)术(tie)文章，多多包涵，欢迎大家在评论中指出错误 (本文只针对基于hexo框架搭建的GitHub Page) 前言首先说一下为什么要为GitHub Page绑定域名，如今越来越多的技术人员甚至是个人都会使用GitHub Page搭建个人博客或者展示网站，自己设计好的个人站希望推广或者让朋友们访问时却苦于GitHub Page的网址冗长难记。 所以，在这个时候，你需要为你的GitHub Page绑定一个精简易记的域名 准备工作： 一个已经搭建好的基于hexo框架的GitHub Page博客 一台已有完整环境mac或pc 一个自己喜欢域名 在这里以腾讯云购买的域名为栗子(为什么我要用腾讯云？因为便宜！) 腾讯云-一元扶持 1元=免费域名+专享服务器 腾讯云的“云+校园计划”非常给力，在你毕业之前的 域名+服务器 只需每个月1元，合计每年12元，优惠到没朋友啊。(我真的没有在打广告= =，可能其他云服务产品也有差不多的优惠，只是我没去了解)虽然现在域名也不算贵，但是这里优惠针对学生确实很大，毕竟学生嘛，勤俭节约是应该滴 准备好之后就进入正题 首先进入自己的本地 hexo博客根目录-&gt;source 文件夹，新建一个空后缀的名为 CNAME 的文件 2. 使用文本编辑程序往里面输入自己购买的域名，例如我购买的域名为ccxxmd.me(也欢迎各位客官经常来本人的小站看看哦) 3. 进入腾讯云主站，登录自己的个人账号，进入“域名管理”选项，在这里你可以看到自己已经购买到的域名4. 点击如上图红圈圈中的 解析 按钮进入域名解析页面5. 可以看到，在记录类型里面有3列，如果你的页面中已经有两个Ade记录类型就直接添加一条 CNAME 记录，主机记录为 www 记录纸为你自己的原始GitHub Page网址，如我的就是ccxxmd.github.io6. 设置完毕之后就可以git bash自己的hexo目录了，键入 hexo g 生成和 hexo d 提交你的GitHub Page或者使用简写命令 hexo d -g 直接生成并且提交到GitHub上7. 最后一步，打开浏览器键入自己的自定域名，然后你就可以看到自己的blog出现在眼前了！(倘若不能加载出来那就等一段时间过后再试一次吧)如果出现GItHub-404的错误，这个时候你就要去检查自己的GitHub Page的代码仓库是否有 CNAME 文件上传成功，存放位置是否正确，CNAME文件内容是否无误，耐心点，一定可以成功的！ 参考：github怎么绑定自己的域名？ 第一次这么正式得写文章呢，好紧张，难免有错请各位海涵，如果你有什么疑问或者建议欢迎在下发评论指出哦。","tags":[{"name":"blog","slug":"blog","permalink":"http://ccxxmd.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"http://ccxxmd.github.io/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://ccxxmd.github.io/tags/hexo/"}]}]