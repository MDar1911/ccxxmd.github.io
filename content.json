[{"title":"PHP简要回顾（下）","date":"2017-04-18T04:12:40.000Z","path":"2017/04/18/PHP_re3/","text":"SESSION的使用SESSION的作用很多，最多用的就是站点内页面间变量传递。在页面开始我们要session_start();开启SESSION； 然后就可以使用SESSION变量了，比如说要赋值就是： $_SESSION[‘item’]=”item1”; 要得到值就是 $item1=$_SESSION[‘item’]; 这里可能会使用到一些函数，比如说判断是不是某SESSION变量为空，可以这么写： empty($_SESSION[‘inum’]) 返回true or false。 制作一个分页显示关键就是用到了SQL语句中的limit来限定显示的记录从几到几。需要一个记录当前页的变量$page，还需要总共的记录数$num 对于$page如果没有就让它=0，如果有&lt;0就让它也=0，如果超过了总的页数就让他=总的页数。 1234$execc=&quot;select count(*) from tablename &quot;;$resultc=mysql_query($execc);$rsc=mysql_fetch_array($resultc);$num=$rsc[0]; 这样可以得到记录总数ceil($num/10)) 如果一页10记录的话，这个就是总的页数 所以可以这么写1234567891011if(empty($_GET[&apos;page&apos;]))&#123;$page=0;&#125;else&#123;$page=$_GET[&apos;page&apos;];if($page&lt;0)$page=0;if($page&gt;=ceil($num/10))$page=ceil($num/10)-1;//因为page是从0开始的，所以要-1&#125; 这样$exec可以这么写12 $exec=&quot;select * from tablename limit &quot;.($page*10).&quot;,10&quot;;//一页是10记录的 最后需要做的就是几个连接： 1234&lt;a href=&quot;xxx.php?page=0&quot;&gt;FirstPage&lt;/a&gt; &lt;a href=&quot;xxx.php?page=&lt;?=($page-1)?&gt;&quot;&gt;PrevPage&lt;/a&gt; &lt;a href=&quot;xxx.php?page=&lt;?=($page+1)?&gt;&quot;&gt;NextPage&lt;/a&gt; &lt;a href=&quot;xxx.php?page=&lt;?=ceil($num/10)-1?&gt;&quot;&gt;LastPage&lt;/a&gt; PHP注意事项1、注意不要漏了分号 2、注意不要漏了变量前的$ 3、使用SESSION的时候注意不要遗漏session_start(); 如果发生错误的时候，可以采用以下方法： 1、如果是SQL语句出错，就注释了然后输出SQL语句，注意也要注释调后续的执行SQL语句 2、如果是变量为空，大多是没有传递到位，输出变量检查一下，检查一下表单的id和name 3、如果是数据库连接出错，检查是否正确打开MY SQL和是否遗漏了连接语句 4、注意缩进，排除括号不区配的错误 在做大网站的时候，我的思路是先构建数据库，确定每一个字段的作用，和表之间的关系。然后设计后台界面，从添加数据开始做起，因为添加是否成功可以直接到数据库里面验证，做好了添加再做显示的页面，最后才是两者的结合。 一般来说后台就包括添加删除修改和显示，后台没有问题了，前台也没有什么大问题。前台还需要注意安全性和容错还有就是输出格式。","tags":[{"name":"PHP","slug":"PHP","permalink":"http://ccxxmd.github.io/tags/PHP/"}]},{"title":"PHP简要回顾(中)","date":"2017-04-17T14:43:51.000Z","path":"2017/04/17/PHP_re2/","text":"MySQL数据库连接打开 MySQL 服务器连接。 mysql_connect 1int mysql_connect(string [hostname] [:port], string [username], string [password]); 返回值: 整数 本函数建立与 MySQL 服务器的连接。其中所有的参数都可省略。当使用本函数却不加任何参数时，参数 hostname 的默认值为 localhost、参数 username 的默认值为 PHP 执行行程的拥有者、参数 password 则为空字符串 (即没有密码)。而参数 hostname 后面可以加冒号与端口号，代表使用哪个端口与 MySQL连接。当然在使用数据库时，早点使用 mysql_close() 将连接关掉可以节省资源。 读取数据选择一个数据库 mysql_select_db 1int mysql_select_db(string database_name, int [link_identifier]); 返回值：整数 本函数选择 MySQL 服务器中的数据库以供之后的资料查询作业 (query) 处理。成功返回 true，失败则返回 false。 举一个最简单的例子： 1$conn = mysql_connect(&quot;127.0.0.1&quot;, &quot;&quot;, &quot;&quot;); mysql_select_db(&quot;shop&quot;); 连接MySQL数据库，打开“shop”数据库。 执行一个 query 字符串1int mysql_query(string query,int [link_identifier]); 返回值：整数 这个函数送出 query 字符串供 MySQL 做相关的处理或者执行。若没有指定 link_identifier参数，则程序会自动寻找最近打开的ID。当query查询字符串是 UPDATE、INSERT 及DELETE时，返回的可能是 true 或者 false；查询的字符串是 SELECT 则返回新的ID 值，当返回 false 时，并不是执行成功但无返回值，而是查询的字符串有错误。 返回类资料 mysql_fetch_object 1object mysql_fetch_object(int result, int[result_typ]); 返回值:类本函数用来将查询结果 result 拆到类变量中。若 result 没有资料，则返回 false 值。 看一个例子：123456789101112131415&lt;? $exec=&quot;select * from user&quot;; $result=mysql_query($exec);while($rs=mysql_fetch_object($result))&#123;echo &quot;username:&quot;.$rs-&gt;username.&quot;&lt;br&gt;&quot;; &#125;?&gt; 当然在这之前先要连接数据库，一般我们require_once(‘conn.php’);而conn.php里面就是上面说的连接数据库的代码。 小小的两条命令可以完成读取数据的工作了 数据操作–添加删除修改 mysql_query($exec); 单这个语句就可以执行所有的操作了，不同的就是$exec这个sql语句 添加： 1$exec=&quot;insert into tablename (item1,item2) values (&apos;&quot;.$_POST[&apos;item1&apos;].&quot;&apos;,&quot;.$_POST[&apos;item1&apos;].&quot;)&quot;; 删除：1$exec=&quot;delete from tablename where...&quot;; 修改：1$exec=&quot;update tablename set item1=&apos;&quot;.$_POST[&apos;item1&apos;].&quot;&apos; where ...&quot;; 说到这里就要说一下表单和php变量传递，如果表单中的一个 1&lt;input name=&quot;item1&quot; type=&quot;text&quot; id=&quot;item1&quot;&gt; 表单以POST提交的，那么处理表单文件就可以用$_POST[&#39;item1&#39;]得到变量值，同样以GET提交的就是$_GET[&#39;item1&#39;]但是通常$exec会有问题，因为可能SQL语句会很长，难免会遗漏.连接符，或者’来包围字符型字段。 我们可以注释mysql_query($exec);语句用echo $exec;代替来输出$exec以检查正确性。如果还不能察觉$exec有什么错误的话，可以复制这个sql语句到phpmyadmin中执行，看看它的出错信息。还有需要注意的是，我们不要使用一些敏感的字符串作为字段名字，否则很可能会出现问题，例如date等。所以变量的命名，字段的命名遵循一点规律有的时候对自己是一种好处","tags":[{"name":"PHP","slug":"PHP","permalink":"http://ccxxmd.github.io/tags/PHP/"}]},{"title":"PHP简要回顾(上)","date":"2017-04-17T11:41:25.000Z","path":"2017/04/17/PHP_re1/","text":"复习一下PHP吧。PP虾，我们走！ 流程控制if..else 循环只有用到 if 条件只用到 if 条件，当作单纯的判断。解释成 “若发生了某事则怎样处理”。语法如下： if (expr) { statement } 其中的 expr 为判断的条件，通常都是用逻辑运算符号当判断的条件。而 statement 为符合条件的执行部分程序，若程序只有一行，可以省略大括号 {}。 范例：本例省略大括号。12345&lt;?php if ($state==1) echo &quot;哈哈&quot; ; ?&gt; 这里特别注意的是，判断是否相等是==而不是=，= 是赋值。 范例：本例的执行部分有三行，不可省略大括号。1234567891011&lt;?php if ($state==1) &#123; echo &quot;哈哈 ; echo &quot;&lt;br&gt;&quot; ; &#125; ?&gt; 除了 if 之外，加上了 else 的条件。除了 if 之外，加上了 else 的条件，可解释成“若发生了某事则怎样处理，否则改如何处理”。语法如下 if (expr) { statement1 } else { statement2 } 范例：上面的例子来修改成更完整的处理。其中的 else 由于只有一行执行的指令，因此不用加上大括号。 123456789101112131415161718if ($state==1) &#123; echo &quot;哈哈&quot; ; echo &quot;&lt;br&gt;&quot;;&#125; else&#123;echo &quot;呵呵&quot;;echo &quot;&lt;br&gt;&quot;; &#125; ?&gt; 递归的 if..else 循环递归的 if..else 循环，通常用在多种决策判断时。它将数个 if..else 拿来合并运用处理。 直接看下面的例子1234567891011121314151617&lt;?php if ( $a &gt; $b ) &#123; echo &quot;a 比 b 大&quot; ; &#125; elseif ( $a == $b ) &#123; echo &quot;a 等于 b&quot; ; &#125; else &#123; echo &quot;a 比 b 小&quot; ; &#125; ?&gt; 上例只用二层的 if..else 循环，用来比较 a 和 b 两个变量。实际要使用这种递归 if..else 循环时，要小心使用，因为太多层的循环容易使设计的逻辑出问题，或者少打了大括号等，都会造成程序出现莫名其妙的问题。 for 循环for 循环就单纯只有一种，没有变化，它的语法如下 for (expr1; expr2; expr3) { statement } 其中的 expr1 为条件的初始值。expr2 为判断的条件，通常都是用逻辑运算符号 (logical operators) 当判断的条件。expr3 为执行 statement 后要执行的部份， 用来改变条件，供下次的循环判断，如加一..等等。而 statement 为符合条件的执行部分程序，若程序只有一行，可以省略大括号 {}。 下例是用 for 循环写的的例子。123456789&lt;?php for ( $i = 1 ; $i &lt;= 10 ; $i ++) &#123; echo &quot;这是第&quot;.$i.&quot;次循环&lt;br&gt;&quot; ; &#125; ?&gt; switch 循环switch 循环，通常处理复合式的条件判断，每个子条件，都是 case 指令部分。在实作上若使用许多类似的 if 指令，可以将它综合成 switch 循环。 语法如下 switch (expr) { case expr1: statement1; break; case expr2: statement2; break; default: statementN; break; } 其中的 expr 条件，通常为变量名称。而 case 后的 exprN，通常表示变量值。冒号后则为符合该条件要执行的部分。注意要用 break 跳离循环。12345678910111213141516171819202122232425262728293031&lt;?php switch ( date ( &quot;D&quot; )) &#123; case &quot;Mon&quot; : echo &quot;今天星期一&quot; ; break; case &quot;Tue&quot; : echo &quot;今天星期二&quot; ; break; case &quot;Wed&quot; : echo &quot;今天星期三&quot; ; break; case &quot;Thu&quot; : echo &quot;今天星期四&quot; ; break; case &quot;Fri&quot; : echo &quot;今天星期五&quot; ; break; default: echo &quot;今天放假&quot; ; break; &#125; ?&gt; 这里需要注意的是break;别遗漏了，default，省略是可以的。 很明显的，上述的例子用 if 循环就很麻烦了。在设计时，要将出现机率最大的条件放在最前面，最少出现的条件放在最后面，可以增加程序的执行效率。 上例由于每天出现的机率相同，所以不用注意条件的顺序。","tags":[{"name":"PHP","slug":"PHP","permalink":"http://ccxxmd.github.io/tags/PHP/"}]},{"title":"Hexo-GitHub Page博客绑定域名","date":"2017-03-04T05:14:34.000Z","path":"2017/03/04/Blog_domainname/","text":"这是我的的第一个技(shui)术(tie)文章，多多包涵，欢迎大家在评论中指出错误 (本文只针对基于hexo框架搭建的GitHub Page) 前言首先说一下为什么要为GitHub Page绑定域名，如今越来越多的技术人员甚至是个人都会使用GitHub Page搭建个人博客或者展示网站，自己设计好的个人站希望推广或者让朋友们访问时却苦于GitHub Page的网址冗长难记。 所以，在这个时候，你需要为你的GitHub Page绑定一个精简易记的域名 准备工作： 一个已经搭建好的基于hexo框架的GitHub Page博客 一台已有完整环境mac或pc 一个自己喜欢域名 在这里以腾讯云购买的域名为栗子(为什么我要用腾讯云？因为便宜！) 腾讯云-一元扶持 1元=免费域名+专享服务器 腾讯云的“云+校园计划”非常给力，在你毕业之前的 域名+服务器 只需每个月1元，合计每年12元，优惠到没朋友啊。(我真的没有在打广告= =，可能其他云服务产品也有差不多的优惠，只是我没去了解)虽然现在域名也不算贵，但是这里优惠针对学生确实很大，毕竟学生嘛，勤俭节约是应该滴 准备好之后就进入正题 首先进入自己的本地 hexo博客根目录-&gt;source 文件夹，新建一个空后缀的名为 CNAME 的文件 2. 使用文本编辑程序往里面输入自己购买的域名，例如我购买的域名为ccxxmd.me(也欢迎各位客官经常来本人的小站看看哦) 3. 进入腾讯云主站，登录自己的个人账号，进入“域名管理”选项，在这里你可以看到自己已经购买到的域名4. 点击如上图红圈圈中的 解析 按钮进入域名解析页面5. 可以看到，在记录类型里面有3列，如果你的页面中已经有两个Ade记录类型就直接添加一条 CNAME 记录，主机记录为 www 记录纸为你自己的原始GitHub Page网址，如我的就是ccxxmd.github.io6. 设置完毕之后就可以git bash自己的hexo目录了，键入 hexo g 生成和 hexo d 提交你的GitHub Page或者使用简写命令 hexo d -g 直接生成并且提交到GitHub上7. 最后一步，打开浏览器键入自己的自定域名，然后你就可以看到自己的blog出现在眼前了！(倘若不能加载出来那就等一段时间过后再试一次吧)如果出现GItHub-404的错误，这个时候你就要去检查自己的GitHub Page的代码仓库是否有 CNAME 文件上传成功，存放位置是否正确，CNAME文件内容是否无误，耐心点，一定可以成功的！ 参考：github怎么绑定自己的域名？ 第一次这么正式得写文章呢，好紧张，难免有错请各位海涵，如果你有什么疑问或者建议欢迎在下发评论指出哦。","tags":[{"name":"blog","slug":"blog","permalink":"http://ccxxmd.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"http://ccxxmd.github.io/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://ccxxmd.github.io/tags/hexo/"}]}]